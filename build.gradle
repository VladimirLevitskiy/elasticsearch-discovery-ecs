/*
 *   Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 *   Licensed under the Apache License, Version 2.0 (the "License").
 *   You may not use this file except in compliance with the License.
 *   A copy of the License is located at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   or in the "license" file accompanying this file. This file is distributed
 *   on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
 *   express or implied. See the License for the specific language governing
 *   permissions and limitations under the License.
 */

// Workaround for ES 7.5.0
// https://github.com/elastic/elasticsearch/issues/49787#issuecomment-562704640
// TODO(timonwong) Should be resolved in ES 7.5.1 :)
import org.elasticsearch.gradle.testclusters.TestClustersRegistry
import org.elasticsearch.gradle.testclusters.TestClustersPlugin

buildscript {

    ext {
        es_version = System.getProperty("es.version", "7.5.0")
    }

    // This isn't applying from repositories.gradle so repeating it here
    repositories {
        mavenCentral()
    }

    dependencies {
        classpath "org.elasticsearch.gradle:build-tools:${es_version}"
    }

}

plugins {
    id 'nebula.ospackage' version '5.3.0'
    id 'java-library'
    id 'checkstyle'
}

// Repository on root level is for dependencies that project code depends on. And this block must be placed after plugins{}
repositories {
    mavenCentral() // For Elastic Libs that you can use to get started coding until open ES libs are available
}

ext {
    projectSubstitutions = [:]

    pluginVersion = '7.5.0'
    isSnapshot = "true" == System.getProperty("build.snapshot", "true")

    licenseFile = rootProject.file('LICENSE.TXT')
    noticeFile = rootProject.file('NOTICE')
}

// common maven publishing configuration
allprojects {
    group = 'com.github.timonwong'
    version = "${pluginVersion}.0"
    description = 'Aliyun ECS discovery plugin for Elasticsearch'

    plugins.withId('java') {
        sourceCompatibility = targetCompatibility = "1.8"
    }
}

apply plugin: 'elasticsearch.esplugin'
apply plugin: 'jacoco'

jacoco {
    toolVersion = '0.8.3'
}

jacocoTestReport {
    reports {
        xml.enabled true
    }
}

esplugin {
    name 'elasticsearch-discovery-ecs' // zip file name and plugin name in ${elasticsearch.plugin.name} read by ES when plugin loading
    description "${project.description}"
    classname 'com.github.timonwong.elasticsearch.discovery.ecs.EcsDiscoveryPlugin'
    licenseFile rootProject.file("LICENSE.txt")
    noticeFile rootProject.file("NOTICE")
}


check.dependsOn jacocoTestReport

// TODO: fix code style in main and test source code
checkstyle {
    configDir file("${rootDir}/config/checkstyle")
}

checkstyleMain.ignoreFailures = false
checkstyleTest.ignoreFailures = true

dependencyLicenses.enabled = true
forbiddenApisMain.enabled = true
forbiddenApisTest.enabled = true
testingConventions.enabled = false

integTest.enabled = false

thirdPartyAudit {
    enabled = true

    ignoreMissingClasses(
        // classes are missing
        'org.apache.avalon.framework.logger.Logger',
        'org.apache.commons.codec.binary.Base64',
        'org.apache.log4j.Category',
        'org.apache.log4j.Level',
        'org.apache.log4j.Logger',
        'org.apache.log4j.Priority',
        'org.apache.log.Logger',
        'org.apache.log.Hierarchy',
        'javax.servlet.ServletContextEvent',
        'javax.servlet.ServletContextListener',

        'javax.activation.DataHandler',
    )
}

versions << [
    "aliyun_sdk_core": "4.4.9",
    "aliyun_sdk_ecs": "4.17.8",
    "gson": "2.8.6",
    "commonsio": "2.6",
]

dependencies {
    compile group: 'com.aliyun', name: 'aliyun-java-sdk-core', version: versions.aliyun_sdk_core
    compile group: 'com.aliyun', name: 'aliyun-java-sdk-ecs', version: versions.aliyun_sdk_ecs

    compileOnly "org.slf4j:slf4j-api:${versions.slf4j}"
    compile "com.google.code.gson:gson:${versions.gson}"
    compile "org.apache.httpcomponents:httpclient:${versions.httpclient}"
    compile "org.apache.httpcomponents:httpcore:${versions.httpcore}"
    compile "commons-logging:commons-logging:${versions.commonslogging}"
    compile "commons-io:commons-io:${versions.commonsio}"

    compile "org.ini4j:ini4j:0.5.4"
    compile "javax.xml.bind:jaxb-api:2.3.1"
}

dependencyLicenses {
    mapping from: /aliyun-java-sdk-.*/, to: 'aliyun-java-sdk'
}

apply plugin: 'nebula.ospackage'

// This is afterEvaluate because the bundlePlugin ZIP task is updated afterEvaluate and changes the ZIP name to match the plugin name
afterEvaluate {
    ospackage {
        packageName = "${project.name}"
        release = isSnapshot ? '0.1' : '1'
        version = "${project.version}" - "-SNAPSHOT"

        into '/usr/share/elasticsearch/plugins'
        from(zipTree(bundlePlugin.archiveFile)) {
            into esplugin.name
        }

        user 'root'
        permissionGroup 'root'
        fileMode 0644
        dirMode 0755

        requires('elasticsearch-oss', versions.elasticsearch, EQUAL)
        packager = 'Timon Wong'
        // vendor = 'XXX'
        os = 'LINUX'
        prefix '/usr'

        license 'ASL-2.0'
        maintainer 'Timon Wong'
        url 'https://github.com/timonwong/elasticsearch-discovery-ecs'
        summary "${project.description}"
    }

    buildRpm {
        arch = 'NOARCH'
        archiveName "${packageName}-${version}.rpm"
        dependsOn 'assemble'
    }

    buildDeb {
        arch = 'amd64'
        archiveName "${packageName}-${version}.deb"
        dependsOn 'assemble'
    }

    task buildPackages(type: GradleBuild) {
        tasks = ['build', 'buildRpm', 'buildDeb']
    }
}

// Workaround for ES 7.5.0
// https://github.com/elastic/elasticsearch/issues/49787#issuecomment-562720655
// TODO(timonwong) Should be resolved in ES 7.5.1 :)
configurations.whenObjectAdded { c ->
    if (c.name == 'elasticsearch_7.5.0_integ_test_zip_null') {
        project.dependencies.add('elasticsearch_7.5.0_integ_test_zip_null', 'org.elasticsearch.distribution.integ-test-zip:elasticsearch:7.5.0@zip')
    }
}

TestClustersRegistry registry = project.rootProject.extensions.create("testClustersRegistry", TestClustersRegistry)
TestClustersPlugin.configureClaimClustersHook(project.gradle, registry)
TestClustersPlugin.configureStartClustersHook(project.gradle, registry)
TestClustersPlugin.configureStopClustersHook(project.gradle, registry)
